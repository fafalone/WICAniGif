Module WICAniGif

Sub Main()
    Dim cApp As New cAniGif
    Dim hr As Long = cApp.Initialize(App.hInstance)
    Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		Dim tMSG As MSG
		' PostLog "Entering message loop"
		hr = GetMessage(tMSG, 0, 0, 0)
		Do While hr <> 0
			If hr = -1 Then
				Debug.Print "Error: 0x" & Hex$(Err.LastDllError)
			Else
				TranslateMessage tMSG
				DispatchMessage tMSG
			End If
			hr = GetMessage(tMSG, 0, 0, 0)
		Loop
    End If
End Sub
    
End Module


Class cAniGif
    
Private mWicFact As WICImagingFactory
Private mDecoder As IWICBitmapDecoder
Private mD2DFact As ID2D1Factory
Private mhwndRT As ID2D1HwndRenderTarget
Private mFrameComposeRT As ID2D1BitmapRenderTarget
Private mRawFrame As ID2D1Bitmap
Private mSavedFrame As ID2D1Bitmap
Private mClrBk As D2D1_COLOR_F
Private mframePosition As D2D1_RECT_F
Private mhwnd As LongPtr
Private mNextFrameIdx As Long
Private mFrameDisposal As DISPOSAL_METHODS
Private mLoopNumber As Long
Private mTotalLoopCount As Long
Private mHasLoop As Boolean
Private mcFrames As Long
Private mFrameDelay As Long
Private mcxGifImage As Long
Private mcyGifImage As Long
Private mcxGifImagePixel As Long
Private mcyGifImagePixel As Long
Private Const DEFAULT_DPI As Single = 96
Private Const DELAY_TIMER_ID As Long = 1
Private Const IDR_WICANIMATEDGIF = 103
Private Const IDM_EXIT  = 105
Private Const IDM_FILE  = 106

Private Enum DISPOSAL_METHODS
	DM_UNDEFINED = 0
	DM_NONE = 1
	DM_BACKGROUND = 2
	DM_PREVIOUS = 3
End Enum

Private Const WndClass As String = "WICANIMATEDGIF"
Public Function Initialize(ByVal hInstance As LongPtr) As Long
	Dim wcex As WNDCLASSEX
	wcex.cbSize = LenB(Of WNDCLASSEX)
	wcex.style = CS_HREDRAW Or CS_VREDRAW
	wcex.lpfnWndProc = AddressOf s_WndProc
	wcex.cbClsExtra = 0
	wcex.cbWndExtra = LenB(Of LongPtr)
	wcex.hInstance = hInstance
	wcex.hIcon = 0
	wcex.hCursor = LoadCursor(0, IDC_ARROW)
	wcex.hbrBackground = 0
	wcex.lpszMenuName = MAKEINTRESOURCE(IDR_WICANIMATEDGIF)
	wcex.lpszClassName = StrPtr(WndClass)
	wcex.hIconSm = 0
	
	
	Dim hr As Long = If(RegisterClassEx(wcex) = 0, E_FAIL, S_OK)
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, IID_ID2D1Factory, ByVal 0, mD2DFact)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		Set mWicFact = New WICImagingFactory
	End If
	If SUCCEEDED(Err.LastHresult) Then
		mhwnd = CreateWindow("WICANIMATEDGIF", _
								"WIC Animated Gif Sample", _
								WS_OVERLAPPEDWINDOW Or WS_VISIBLE, _
								CW_USEDEFAULT, _
								CW_USEDEFAULT, _
								CW_USEDEFAULT, _
								CW_USEDEFAULT, _
								0, _
								0, _
								hInstance, _
								ObjPtr(Me))

		hr = If(mhwnd = 0, E_FAIL, S_OK)
	
	End If
	
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = SelectAndDisplayGif()
		If FAILED(hr) Then
			DestroyWindow mhwnd
		End If
	End If
	
	Return hr
End Function
Public Function s_WndProc(ByVal phWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
	Dim pThis As cAniGif
    Dim lRet As LongPtr
    Dim pTmp As LongPtr
    If uMsg = WM_NCCREATE Then
        pTmp = CType(Of CREATESTRUCT)(lParam).lpCreateParams
        SetWindowLongPtr phWnd, GWLP_USERDATA, pTmp
        lRet = DefWindowProc(phWnd, uMsg, wParam, lParam)
    Else
        pTmp = GetWindowLongPtr(phWnd, GWLP_USERDATA)
        If pTmp Then
        	CopyMemory pThis, pTmp, LenB(Of LongPtr)
            lRet = pThis.ucWndProc(phWnd, uMsg, wParam, lParam)
            CopyMemory pThis, 0, LenB(Of LongPtr)
        Else
            lRet = DefWindowProc(phWnd, uMsg, wParam, lParam)
        End If
    End If
    Return lRet
End Function
Private Function IsLastFrame() As Boolean
	Return (mNextFrameIdx = 0)
End Function
Private Function EndOfAnimation() As Boolean
	Return mHasLoop And IsLastFrame() And (mLoopNumber = mTotalLoopCount + 1)
End Function
Public Function GetFileOpen(lpszFile As String) As BOOL
	Dim fod As FileOpenDialog
	Set fod = New FileOpenDialog
	Dim lpAbsPath As LongPtr
	Dim lpPath As LongPtr
	Dim siRes As IShellItem
	Dim tFilt() As COMDLG_FILTERSPEC
	ReDim tFilt(0)
	tFilt(0).pszName = StrPtr("GIF Images")
	tFilt(0).pszSpec = StrPtr("*.gif")
	With fod
		.SetTitle "Pick folder"
		.SetOptions FOS_PATHMUSTEXIST
		.SetFileTypes 1, VarPtr(tFilt(0))
		On Error Resume Next
		.Show mhwnd
		.GetResult siRes
		On Error GoTo 0
		If (siRes Is Nothing) = False Then
			'siRes.GetDisplayName SIGDN_DESKTOPABSOLUTEPARSING, lpAbsPath
			siRes.GetDisplayName SIGDN_FILESYSPATH, lpPath
			lpszFile = LPWSTRtoStr(lpPath)
			Return CTRUE
			' If InStr(PickFile, " ") Then
			'     PickFile = Chr$(34) & PickFile & Chr$(34)
			' End If 
		End If
	
	End With
End Function
Public Function SelectAndDisplayGif() As Long
	On Error Resume Next
	Dim hr As Long
	Dim rcClient As RECT
	Dim rcWindow As RECT
	Dim sFile As String
	If GetFileOpen(sFile) Then
		mNextFrameIdx = 0
		mFrameDisposal = DM_NONE ' No previous frame, use disposal none
		mLoopNumber = 0
		mHasLoop = False
		Set mSavedFrame = Nothing
		Set mDecoder = mWicFact.CreateDecoderFromFilename(StrPtr(sFile), vbNullPtr, _
											GENERIC_READ, WICDecodeMetadataCacheOnLoad)
		If SUCCEEDED(Err.LastHresult) Then
			hr = GetGlobalMetadata()
		End If
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			rcClient.Right = mcxGifImagePixel
			rcClient.Bottom = mcyGifImagePixel
			If AdjustWindowRect(rcClient, WS_OVERLAPPEDWINDOW, CTRUE) = 0 Then
				hr = HRESULT_FROM_WIN32(Err.LastDllError)
			End If
		End If
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			If GetWindowRect(mhwnd, rcWindow) = 0 Then
				hr = HRESULT_FROM_WIN32(Err.LastDllError)
			End If
		End If
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			MoveWindow(mhwnd, _
						rcWindow.Left, _
						rcWindow.Top, _
						RectWidth(rcClient), _
						RectHeight(rcClient), _
						CTRUE)

			hr = CreateDeviceResources()
		
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				If mcFrames > 0 Then
					hr = ComposeNextFrame()
					InvalidateRect(mhwnd, vbNullPtr, CFALSE)
				End If
			End If
		End If
	End If
	Return hr
End Function
' Public Function DisplayGif(ByVal sFile As String) As Long
'     On Error Resume Next
'     Dim hr As Long
'     Dim rcClient As RECT
'     Dim rcWindow As RECT
'     mNextFrameIdx = 0
'     mFrameDisposal = DM_NONE ' No previous frame, use disposal none
'     mLoopNumber = 0
'     mHasLoop = False
'     Set mSavedFrame = Nothing
'     Set mDecoder = mWicFact.CreateDecoderFromFilename(StrPtr(sFile), vbNullPtr, _
'                                         GENERIC_READ, WICDecodeMetadataCacheOnLoad)
'     If SUCCEEDED(Err.LastHresult) Then
'         hr = GetGlobalMetadata()
'     End If
'     Debug.Assert hr = 0
' If SUCCEEDED(hr) Then
'         rcClient.Right = mcxGifImagePixel
'         rcClient.Bottom = mcyGifImagePixel
'         If AdjustWindowRect(rcClient, WS_OVERLAPPEDWINDOW, CTRUE) = 0 Then
'             hr = HRESULT_FROM_WIN32(Err.LastDllError)
'         End If
'     End If
'     Debug.Assert hr = 0
' If SUCCEEDED(hr) Then
'         If GetWindowRect(mhwnd, rcWindow) = 0 Then
'             hr = HRESULT_FROM_WIN32(Err.LastDllError)
'         End If
'     End If
'     Debug.Assert hr = 0
' If SUCCEEDED(hr) Then
'         MoveWindow(mhwnd, _
'                     rcWindow.Left, _
'                     rcWindow.Top, _
'                      RectWidth(rcClient), _
'                      RectHeight(rcClient), _
'                      CTRUE)

'         hr = CreateDeviceResources()
	
'         Debug.Assert hr = 0
' If SUCCEEDED(hr) Then
'             If mcFrames > 0 Then
'                 hr = ComposeNextFrame()
'                 InvalidateRect(mhwnd, vbNullPtr, CFALSE)
'             End If
'         End If
'     End If
'     Return hr
' End Function
Private Function ComposeNextFrame() As Long
	On Error Resume Next
	Dim hr As Long
	If (mhwndRT IsNot Nothing) And (mFrameComposeRT IsNot Nothing) Then
		KillTimer(mhwnd, DELAY_TIMER_ID)
		hr = DisposeCurrentFrame()
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = OverlayNextFrame()
		End If
	
		While SUCCEEDED(hr) And (mFrameDelay = 0) And (IsLastFrame() = False)
			hr = DisposeCurrentFrame()
			If (SUCCEEDED(hr)) Then
				hr = OverlayNextFrame()
			End If
		Wend
	
		If (EndOfAnimation() = False) And (mcFrames > 1) Then
			SetTimer(mhwnd, DELAY_TIMER_ID, mFrameDelay, 0)
		End If

	End If

	Return hr
End Function
Private Function DisposeCurrentFrame() As Long
	On Error Resume Next
	Dim hr As Long
	Select Case mFrameDisposal
		Case DM_UNDEFINED, DM_NONE
			' We simply draw on the previous frames. Do nothing here.
		Case DM_BACKGROUND
			' // Dispose background
			' // Clear the area covered by the current raw frame with background color
			hr = ClearCurrentFrameArea()
		Case DM_PREVIOUS
			' // Dispose previous
			' // We restore the previous composed frame first
			hr = RestoreSavedFrame()
		Case Else
			hr = E_FAIL
	End Select
	Return hr
End Function
Private Function OverlayNextFrame() As Long
	On Error Resume Next
	Dim hr As Long
	hr = GetRawFrame(mNextFrameIdx)
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		'    // For disposal 3 method, we would want to save a copy of the current
		'    // composed frame
		If (mFrameDisposal = DM_PREVIOUS) Then
			hr = SaveComposedFrame()
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		mFrameComposeRT.BeginDraw()
		If mNextFrameIdx = 0 Then
			mFrameComposeRT.Clear(mClrBk)
			mLoopNumber += 1
		End If
		mFrameComposeRT.DrawBitmap(mRawFrame, mframePosition, 1.0, D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, vbNullPtr)
		mFrameComposeRT.EndDraw(ByVal 0, ByVal 0)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		mNextFrameIdx += 1
		mNextFrameIdx = mNextFrameIdx Mod mcFrames
	End If
	Return hr
End Function
Private Function SaveComposedFrame() As Long
	On Error Resume Next
	Dim hr As Long
	Dim pFrameToBeSaved As ID2D1Bitmap
	Set pFrameToBeSaved = mFrameComposeRT.GetBitmap()
	If SUCCEEDED(Err.LastHresult) Then
		If mSavedFrame Is Nothing Then
			Dim bitmapSize As D2D1_SIZE_U
			Dim bitmapProp As D2D1_BITMAP_PROPERTIES
			pFrameToBeSaved.GetDpi(bitmapProp.DpiX, bitmapProp.DpiY)
			bitmapProp.PixelFormat = pFrameToBeSaved.GetPixelFormat()
		
			Set mSavedFrame = mFrameComposeRT.CreateBitmap(SizeToLongLong(bitmapSize.width, bitmapSize.Height), _
																	ByVal 0, 0, bitmapProp)
		End If
	End If
	If SUCCEEDED(Err.LastHresult) Then
		mSavedFrame.CopyFromBitmap(vbNullPtr, pFrameToBeSaved, vbNullPtr)
	End If
	Set pFrameToBeSaved = Nothing
	Return Err.LastHresult
End Function
Private Function RecoverDeviceResources() As Long
	On Error Resume Next
	Dim hr As Long
	Set mhwndRT = Nothing
	Set mFrameComposeRT = Nothing
	Set mSavedFrame = Nothing

	mNextFrameIdx = 0
	mFrameDisposal = DM_NONE ' No previous frames. Use disposal none.
	mLoopNumber = 0

	hr = CreateDeviceResources()
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		If mcFrames > 0 Then
			hr = ComposeNextFrame()
			InvalidateRect(mhwnd, vbNullPtr, CFALSE)
		End If
	End If

	Return hr
End Function

Private Function RestoreSavedFrame() As Long
	On Error Resume Next
	Dim hr As Long
	Dim pFrameToCopyTo As ID2D1Bitmap
	hr = If(mSavedFrame IsNot Nothing, S_OK, E_FAIL)
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		Set pFrameToCopyTo = mFrameComposeRT.GetBitmap()
	End If
	If SUCCEEDED(Err.LastHresult) Then
		pFrameToCopyTo.CopyFromBitmap(vbNullPtr, mSavedFrame, vbNullPtr)
	End If
	Return Err.LastHresult
End Function
Private Function ClearCurrentFrameArea() As Long
	On Error Resume Next
	mFrameComposeRT.BeginDraw()
	mFrameComposeRT.PushAxisAlignedClip(mframePosition, D2D1_ANTIALIAS_MODE_PER_PRIMITIVE)
	mFrameComposeRT.Clear(mClrBk)
	mFrameComposeRT.PopAxisAlignedClip()
	mFrameComposeRT.EndDraw(ByVal 0, ByVal 0)
	Return Err.LastHresult
End Function
Private Function CreateDeviceResources() As Long
	On Error Resume Next
	Dim hr As Long
	Dim rcClient As RECT
	If GetClientRect(mhwnd, rcClient) = 0 Then
		hr = HRESULT_FROM_WIN32(Err.LastDllError)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		If mhwndRT Is Nothing Then
			Dim renderTargetProperties As D2D1_RENDER_TARGET_PROPERTIES
			renderTargetProperties = D2D1.RenderTargetProperties()
			renderTargetProperties.DpiX = DEFAULT_DPI
			renderTargetProperties.DpiY = DEFAULT_DPI
		
			Dim hwndRenderTragetproperties As D2D1_HWND_RENDER_TARGET_PROPERTIES
			With hwndRenderTragetproperties
				.hwnd = mhwnd
				.pixelSize = D2D1.SizeU(RectWidth(rcClient), RectHeight(rcClient))
			End With
		
			Set mhwndRT = mD2DFact.CreateHwndRenderTarget(renderTargetProperties, _
												hwndRenderTragetproperties)
			hr = Err.LastHresult
		Else
			' // We already have a hwnd render target, resize it to the window size
			Dim size As D2D1_SIZE_U
			size.width = RectWidth(rcClient)
			size.Height = RectHeight(rcClient)
			mhwndRT.Resize(size)
			hr = Err.LastHresult
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		Set mFrameComposeRT = Nothing
		Set mFrameComposeRT = mhwndRT.CreateCompatibleRenderTarget(D2D1.SizeF(mcxGifImage, mcyGifImage), _
										vbNullPtr, vbNullPtr, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE)
	
		hr = Err.LastHresult
	End If
	Return hr
End Function
Private Function GetGlobalMetadata() As Long
	On Error Resume Next
	Dim propValue As Variant
	PropVariantInit(propValue)
	Dim pMetadataQueryReader As IWICMetadataQueryReader

	Dim hr As Long = mDecoder.GetFrameCount(mcFrames)
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = mDecoder.GetMetadataQueryReader(pMetadataQueryReader)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			If FAILED(GetBackgroundColor(pMetadataQueryReader)) Then
				' Default to transparent if failed to get the color
				mClrBk = D2D1.ColorF(0, 0)
			End If
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
	hr = pMetadataQueryReader.GetMetadataByName(StrPtr("/logscrdesc/Width"), propValue)
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = If(VarTypeEx(propValue) = VT_UI2, S_OK, E_FAIL)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			CopyMemory mcxGifImage, ByVal PointerAdd(VarPtr(propValue), 8), 2
		End If
		PropVariantClear(propValue)
	End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pMetadataQueryReader.GetMetadataByName(StrPtr("/logscrdesc/Height"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI2, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				CopyMemory mcyGifImage, ByVal PointerAdd(VarPtr(propValue), 8), 2
			End If
			PropVariantClear(propValue)
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pMetadataQueryReader.GetMetadataByName(StrPtr("/logscrdesc/PixelAspectRatio"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI1, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				Dim uPixelAspRatio As Long
				CopyMemory uPixelAspRatio, ByVal PointerAdd(VarPtr(propValue), 8), 1
				If uPixelAspRatio Then
				' // Need to calculate the ratio. The value in uPixelAspRatio 
				' // allows specifying widest pixel 4:1 to the tallest pixel of 
				' // 1:4 in increments of 1/64th
					Dim pixelAspRatio As Single = (uPixelAspRatio + 15.0!) / 64.0!

					' // Calculate the image width And height in pixel based On the
					' // pixel aspect ratio. Only shrink the image.
					If (pixelAspRatio > 1.0!) Then
						mcxGifImagePixel = mcxGifImage
						mcyGifImagePixel = CLng(mcyGifImage \ pixelAspRatio)
					Else
						mcxGifImagePixel = CLng(mcxGifImage * pixelAspRatio)
						mcyGifImagePixel = mcyGifImage
					End If
				Else
					' // The value Is 0, so its ratio Is 1
					mcxGifImagePixel = mcxGifImage
					mcyGifImagePixel = mcyGifImage
				End If
				PropVariantClear(propValue)
			End If
		End If
	End If
					
	'Get looping info
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		' // First check to see if the application block in the Application Extension
		' // contains "NETSCAPE2.0" And "ANIMEXTS1.0", which indicates the gif animation
		' // has looping information associated With it.
		' // 
		' // If we fail to get the looping information, Loop the animation infinitely.
		If (SUCCEEDED(pMetadataQueryReader.GetMetadataByName(StrPtr("/appext/application"), propValue))) Then

			If VarTypeEx(propValue) = (VT_UI1 Or VT_VECTOR) Then
				If CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).cElems = 11 Then  '// Length of the application block
					If (CompareMemory(ByVal CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).pElems, ByVal StrPtr(UtfToANSI("NETSCAPE2.0")), CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).cElems) = 0) Or _
					(CompareMemory(ByVal CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).pElems, ByVal StrPtr(UtfToANSI("ANIMEXTS1.0")), CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).cElems) = 0) Then
				
						PropVariantClear(propValue)
					End If
				End If
			End If
			hr = pMetadataQueryReader.GetMetadataByName(StrPtr("/appext/data"), propValue)
		
			If (SUCCEEDED(hr)) Then
			' //  The data is in the following format:
			' //  byte 0: extsize (must be > 1)
			' //  byte 1: loopType (1 == animated gif)
			' //  byte 2: loop count (least significant byte)
			' //  byte 3: loop count (most significant byte)
			' //  byte 4: set to zero
				If CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).cElems >= 4 Then
					Dim t1 As Byte, t2 As Byte
					CopyMemory t1, CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).pElems, 1
					CopyMemory t2, PointerAdd(CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).pElems, 1), 1
					If (t1 > 0) And (t2 = 1) Then
						Dim t3 As Byte, t4 As Byte
						CopyMemory t3, PointerAdd(CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).pElems, 2), 1
						CopyMemory t4, PointerAdd(CType(Of CAUB)(PointerAdd(VarPtr(propValue), 8)).pElems, 3), 1
						mTotalLoopCount = MAKEWORD(t3, t4)
						If mTotalLoopCount Then
							mHasLoop = True
						End If
					End If
				End If
			End If
		End If
	End If
	PropVariantClear(propValue)
	Set pMetadataQueryReader = Nothing
	Return hr
End Function

Private Function GetRawFrame(ByVal uFrameIndex As Long) As Long
	On Error Resume Next
	Dim hr As Long
	Dim pConverter As IWICFormatConverter
	Dim pWicFrame As IWICBitmapFrameDecode
	Dim pFrameMetadataQueryReader As IWICMetadataQueryReader
	Dim propValue As Variant
	PropVariantInit(propValue)

	Set pWicFrame = mDecoder.GetFrame(uFrameIndex)
	If SUCCEEDED(Err.LastHresult) Then
		Set pConverter = mWicFact.CreateFormatConverter()
	End If
	If SUCCEEDED(Err.LastHresult) Then
		hr = pConverter.Initialize(pWicFrame, GUID_WICPixelFormat32bppPBGRA, WICBitmapDitherTypeNone, Nothing, 0, WICBitmapPaletteTypeCustom)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		Set mRawFrame = Nothing
		Set mRawFrame = mhwndRT.CreateBitmapFromWicBitmap(pConverter, vbNullPtr)
	End If
	If SUCCEEDED(Err.LastHresult) Then
		hr = pWicFrame.GetMetadataQueryReader(pFrameMetadataQueryReader)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pFrameMetadataQueryReader.GetMetadataByName(StrPtr("/imgdesc/Left"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI2, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				Dim tmp As Long
				CopyMemory tmp, ByVal PointerAdd(VarPtr(propValue), 8), 2
				mframePosition.Left = tmp
			End If
			PropVariantClear(propValue)
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pFrameMetadataQueryReader.GetMetadataByName(StrPtr("/imgdesc/Top"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI2, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				CopyMemory tmp, ByVal PointerAdd(VarPtr(propValue), 8), 2
				mframePosition.Top = tmp
			End If
			PropVariantClear(propValue)
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pFrameMetadataQueryReader.GetMetadataByName(StrPtr("/imgdesc/Width"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI2, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				CopyMemory tmp, ByVal PointerAdd(VarPtr(propValue), 8), 2
				mframePosition.Right = tmp + mframePosition.Left
			End If
			PropVariantClear(propValue)
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pFrameMetadataQueryReader.GetMetadataByName(StrPtr("/imgdesc/Height"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI2, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				CopyMemory tmp, ByVal PointerAdd(VarPtr(propValue), 8), 2
				mframePosition.Bottom = tmp + mframePosition.Top
			End If
			PropVariantClear(propValue)
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pFrameMetadataQueryReader.GetMetadataByName(StrPtr("/grctlext/Delay"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI2, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				CopyMemory tmp, ByVal PointerAdd(VarPtr(propValue), 8), 2
				mFrameDelay = tmp * 10
			End If
			PropVariantClear(propValue)
		Else
			mFrameDelay = 0
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		'We're going to do things different than the SDK example here, because the SDK example
		'says If < 90 then = 90, which seems an awful lot like the Netscape bug from the 90s
		'they account for in IShellImageData/InternetExplorer. Since plenty of modern gifs have
		'frame delays below 90ms deliberately that are required for smooth playback, we'll go
		'ahead and risk some parts of 90s-era gifs not playing quite right and only impose an
		'artificial delay if it's actually 0.
		If mFrameDelay = 0 Then mFrameDelay = 90
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pFrameMetadataQueryReader.GetMetadataByName(StrPtr("/grctlext/Disposal"), propValue)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			hr = If(VarTypeEx(propValue) = VT_UI1, S_OK, E_FAIL)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				CopyMemory tmp, ByVal PointerAdd(VarPtr(propValue), 8), 1
				mFrameDisposal = tmp
			End If
			PropVariantClear(propValue)
		Else
			mFrameDisposal = DM_UNDEFINED
		End If
	End If

	PropVariantClear(propValue)
	Set pConverter = Nothing
	Set pWicFrame = Nothing
	Set pFrameMetadataQueryReader = Nothing

	Return hr
End Function


Private Function GetBackgroundColor(ByVal pMetadataQueryReader As IWICMetadataQueryReader) As Long
	On Error Resume Next
	Dim dwBGColor As Long
	Dim backgroundIndex As Byte
	Dim rgColors(255) As Long ' WicColor
	Dim cColorsCopied As Long
	Dim propVariant As Variant
	PropVariantInit(propVariant)
	Dim pWicPalette As IWICPalette

	Dim hr As Long = pMetadataQueryReader.GetMetadataByName(StrPtr("/logscrdesc/GlobalColorTableFlag"), propVariant)
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		If VarTypeEx(propVariant) = VT_BOOL Then
			Dim boolVal As Long
			CopyMemory boolVal, ByVal PointerAdd(VarPtr(propVariant), 8), 4
			If boolVal = 0 Then
				hr = E_FAIL
			End If
		Else
            hr = E_FAIL
		End If
        PropVariantClear(propVariant)
    End If
    Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pMetadataQueryReader.GetMetadataByName(StrPtr("/logscrdesc/BackgroundColorIndex"), propVariant)
		Debug.Assert hr = 0
If SUCCEEDED(hr) Then
			If VarTypeEx(propVariant) <> VT_UI1 Then
				hr = E_FAIL
			Else
				hr = S_OK
				backgroundIndex = propVariant
			End If
			PropVariantClear(propVariant)
		End If
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = mWicFact.CreatePalette(pWicPalette)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = mDecoder.CopyPalette(pWicPalette)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = pWicPalette.GetColors(UBound(rgColors) + 1, rgColors(0), cColorsCopied)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		hr = IIf(backgroundIndex >= cColorsCopied, E_FAIL, S_OK)
	End If
	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		dwBGColor = rgColors(backgroundIndex)
		Dim alpha As Single
		alpha = (dwBGColor >> 24) / 255
		mClrBk = D2D1.ColorF(dwBGColor, alpha)
	End If

	Return hr
End Function
Private Function CalculateDrawRectangle(drawRect As D2D1_RECT_F) As Long
	On Error Resume Next
	Dim hr As Long
	Dim rcClient As RECT
	If GetClientRect(mhwnd, rcClient) = 0 Then
		hr = HRESULT_FROM_WIN32(Err.LastDllError)
	End If

	Debug.Assert hr = 0
If SUCCEEDED(hr) Then
		drawRect.Left = (rcClient.Right - mcxGifImagePixel) / 2
		drawRect.Top = (rcClient.Bottom - mcyGifImagePixel) / 2
		drawRect.Right = drawRect.Left + mcxGifImagePixel
		drawRect.Bottom = drawRect.Top + mcyGifImagePixel
	
		Dim aspectRatio As Single = mcxGifImagePixel / mcyGifImagePixel
	
		Dim newWidth As Single, newHeight As Single
		If (drawRect.Left < 0) Then
			newWidth = (rcClient.Right)
			newHeight = newWidth / aspectRatio
			drawRect.Left = 0
			drawRect.Top = (rcClient.Bottom - newHeight) / 2
			drawRect.Right = newWidth
			drawRect.Bottom = drawRect.Top + newHeight
		End If
		If (drawRect.Top < 0) Then
			newHeight = (rcClient.Bottom)
			newWidth = newHeight * aspectRatio
			drawRect.Left = (rcClient.Right - newWidth) / 2
			drawRect.Top = 0
			drawRect.Right = drawRect.Left + newWidth
			drawRect.Bottom = newHeight
		End If
	
	End If

	Return hr
End Function
Private Function OnRender() As Long
	On Error Resume Next
	Debug.Print "OnRender Nextframe=" & mNextFrameIdx & ", total=" & mcFrames & ", dly=" & mFrameDelay
	Dim hr As Long
	Dim pFrameToRender As ID2D1Bitmap
	If (mhwndRT IsNot Nothing) And (mFrameComposeRT IsNot Nothing) Then
		'Only render when the window is not occluded
		If (mhwndRT.CheckWindowState() And D2D1_WINDOW_STATE_OCCLUDED) = 0 Then
			Dim drawRect As D2D1_RECT_F
			hr = CalculateDrawRectangle(drawRect)
			Debug.Assert hr = 0
If SUCCEEDED(hr) Then
				Set pFrameToRender = mFrameComposeRT.GetBitmap()
			End If
			If SUCCEEDED(Err.LastHresult) Then
				mhwndRT.BeginDraw()
				mhwndRT.Clear(D2D1.ColorF(D2D1_COLORS.Black))
				mhwndRT.DrawBitmap(pFrameToRender, drawRect, 1.0, D2D1_BITMAP_INTERPOLATION_MODE_LINEAR, vbNullPtr)
				mhwndRT.EndDraw(ByVal 0, ByVal 0)
				hr = Err.LastHresult
			End If
		End If
		
	End If
	Set pFrameToRender = Nothing
	Return hr
End Function
Private Function OnResize(ByVal uWidth As Long, ByVal uHeight As Long) As Long
	On Error Resume Next
	Dim hr As Long
	If mhwndRT IsNot Nothing Then
		Dim size As D2D1_SIZE_U
		size.width = uWidth
		size.Height = uHeight
		mhwndRT.Resize(size)
		hr = Err.LastHresult
	End If
	Return hr
End Function
Private Function RectWidth(rc As RECT) As Long
	Return rc.Right - rc.Left
End Function
Private Function RectHeight(rc As RECT) As Long
	Return rc.Bottom - rc.Top
End Function

Private Function Subclass2(hWnd As LongPtr, lpFN As LongPtr, Optional uId As LongPtr = 0&, Optional dwRefData As LongPtr = 0&) As Boolean
If uId = 0 Then uId = hWnd
	Subclass2 = SetWindowSubclass(hWnd, lpFN, uId, dwRefData):      Debug.Assert Subclass2
End Function
Private Function UnSubclass2(hWnd As LongPtr, ByVal lpFN As LongPtr, pid As LongPtr) As Boolean
	UnSubclass2 = RemoveWindowSubclass(hWnd, lpFN, pid)
End Function
Public Function ucWndProc(ByVal phWnd As LongPtr, ByVal uMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
	Dim hr As Long
	Select Case uMsg
        Case WM_COMMAND
            Select Case LOWORD(wParam)
                Case IDM_FILE
                    hr = SelectAndDisplayGif()
                    If FAILED(hr) Then
                        MsgBox "Load gif file failed. Exiting application.", vbCritical Or vbOKOnly, App.Title
                        PostQuitMessage(1)
                        Return 1
                    End If
                    
				Case IDM_EXIT
					PostMessage(phWnd, WM_CLOSE, 0, ByVal 0)
            End Select
            
        Case WM_PAINT
			' Debug.Print "WM_PAINT"
			hr = OnRender()
			ValidateRect(phWnd, vbNullPtr)
		Case WM_TIMER
			' Debug.Print "WM_TIMER"
			hr = ComposeNextFrame()
			hr = InvalidateRect(phWnd, vbNullPtr, CFALSE)
			' If hr = 0 Then
			'     Debug.Print "IR failed, 0x" & Err.LastDllError & ": " & GetSystemErrorString(Err.LastDllError)
			' Else
			'     Debug.Print "WM_TIMER IR  ok"
			' End If
			' RedrawWindow mhwnd, vbNullPtr, 0, RDW_INVALIDATE Or RDW_INTERNALPAINT
			' UpdateWindow phWnd
			' PostMessage phWnd, WM_PAINT, 0, ByVal 0
		Case WM_SIZE
			Dim uWidth As Long = LOWORD(lParam)
			Dim uHeight As Long = HIWORD(lParam)
			hr = OnResize(uWidth, uHeight)
	
		Case WM_DISPLAYCHANGE
			InvalidateRect(phWnd, vbNullPtr, CFALSE)
		
		
		
		Case WM_DESTROY
		'     Call UnSubclass2(phWnd, AddressOf ucWndProc, uIdSubclass)
     		PostQuitMessage(0)
          
		Case Else
			' Return DefSubclassProc(phWnd, uMsg, wParam, lParam)
			Return DefWindowProc(phWnd, uMsg, wParam, lParam)
	End Select

	If hr = D2DERR_RECREATE_TARGET Then
		hr = RecoverDeviceResources()
		If FAILED(hr) Then
			' Debug.Print "Fatal error, shutting down message loop"
			' Call UnSubclass2(phWnd, AddressOf ucWndProc, uIdSubclass)
			MsgBox "Device loss recovery failed. Exiting application.", vbCritical Or vbOKOnly, App.Title
      		PostQuitMessage(1)
		End If
	End If
	
    Return 0
End Function
End Class

    [PredeclaredId(True)]
    Private Class D2D1
        Public Function ColorF( _
                        ByVal eColor As D2D1_COLORS, _
                        Optional ByVal fAlpha As Single = 1!) As D2D1_COLOR_F
            Dim bR As Byte
            Dim bB As Byte
            Dim bG As Byte
    
            bB = eColor And &HFF
            bG = (eColor \ &H100) And &HFF
            bR = (eColor \ &H10000) And &HFF
    
            With ColorF
    
            .r = bR / 255!
            .g = bG / 255!
            .b = bB / 255!
            .a = fAlpha
    
            End With
    
        End Function
    
        Public Function ColorF( _
                        ByVal fR As Single, _
                        ByVal fG As Single, _
                        ByVal fB As Single, _
                        Optional ByVal fAlpha As Single = 1!) As D2D1_COLOR_F
    
            With ColorF
    
            .r = fR
            .g = fG
            .b = fB
            .a = fAlpha
    
            End With
    
        End Function

        Public Function Matrix3x2F( _
                        ByVal f_11 As Single, _
                        ByVal f_12 As Single, _
                        ByVal f_21 As Single, _
                        ByVal f_22 As Single, _
                        ByVal f_31 As Single, _
                        ByVal f_32 As Single) As D2D1_MATRIX_3X2_F
    
            With Matrix3x2F
    
            .m_11 = f_11
            .m_12 = f_12
            .m_21 = f_21
            .m_22 = f_22
            .m_31 = f_31
            .m_32 = f_32
    
            End With
    
        End Function

        Public Function Matrix3x2F_Identity() As D2D1_MATRIX_3X2_F
    
            With Matrix3x2F_Identity
    
            .m_11 = 1
            .m_22 = 1
    
            End With
    
        End Function

        Public Function Matrix3x2F_Translation( _
                        ByRef tSize As D2D1_SIZE_F) As D2D1_MATRIX_3X2_F
    
            With Matrix3x2F_Translation
    
            .m_11 = 1!: .m_12 = 0!
            .m_21 = 0!: .m_22 = 1!
            .m_31 = tSize.width: .m_32 = tSize.Height
    
            End With
    
        End Function

        Public Function Matrix3x2F_Translation2( _
                        ByVal fWidth As Single, _
                        ByVal fHeight As Single) As D2D1_MATRIX_3X2_F
    
            With Matrix3x2F_Translation2
    
            .m_11 = 1!: .m_12 = 0!
            .m_21 = 0!: .m_22 = 1!
            .m_31 = fWidth: .m_32 = fHeight
    
            End With
    
        End Function

        Public Function Matrix3x2F_Scale( _
                        ByRef tSize As D2D1_SIZE_F, _
                        ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
    
            With Matrix3x2F_Scale
    
            .m_11 = tSize.width: .m_12 = 0!
            .m_21 = 0!: .m_22 = tSize.Height
            .m_31 = tCenter.x - tSize.width * tCenter.x
            .m_32 = tCenter.y - tSize.Height * tCenter.y
    
            End With
    
        End Function

        Public Function Matrix3x2F_Scale2( _
                        ByVal fWidth As Single, _
                        ByVal fHeight As Single, _
                        ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
    
            With Matrix3x2F_Scale2
    
            .m_11 = fWidth: .m_12 = 0!
            .m_21 = 0!: .m_22 = fHeight
            .m_31 = tCenter.x - fWidth * tCenter.x
            .m_32 = tCenter.y - fHeight * tCenter.y
    
            End With
    
        End Function

        Public Function Matrix3x2F_Rotation( _
                        ByVal fAngle As Single, _
                        ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
            D2D1MakeRotateMatrix fAngle, PointFToLongLong(tCenter.x, tCenter.y), Matrix3x2F_Rotation
        End Function

        Public Function Matrix3x2F_Rotation2( _
                        ByVal fAngle As Single, _
                        ByVal fCenterX As Single, _
                        ByVal fCentery As Single) As D2D1_MATRIX_3X2_F
            D2D1MakeRotateMatrix fAngle, PointFToLongLong(fCenterX, fCentery), Matrix3x2F_Rotation2
        End Function

        Public Function Matrix3x2F_Skew( _
                        ByVal fAngleX As Single, _
                        ByVal fAngleY As Single, _
                        ByRef tCenter As D2D1_POINT_2F) As D2D1_MATRIX_3X2_F
            D2D1MakeSkewMatrix fAngleX, fAngleY, PointFToLongLong(tCenter.x, tCenter.y), Matrix3x2F_Skew
        End Function

        Public Function Matrix3x2F_Determinant( _
                        ByRef tMtx As D2D1_MATRIX_3X2_F) As Single
            Matrix3x2F_Determinant = (tMtx.m_11 * tMtx.m_22) - (tMtx.m_12 * tMtx.m_21)
        End Function

        Public Function Matrix3x2F_IsInvertible( _
                        ByRef tMtx As D2D1_MATRIX_3X2_F) As Boolean
            Matrix3x2F_IsInvertible = D2D1IsMatrixInvertible(tMtx)
        End Function

        Public Function Matrix3x2F_Invert( _
                        ByRef tMtx As D2D1_MATRIX_3X2_F) As Boolean
            Matrix3x2F_Invert = D2D1InvertMatrix(tMtx)
        End Function

        Public Function Matrix3x2F_IsIdentity( _
                        ByRef tMtx As D2D1_MATRIX_3X2_F) As Boolean
            Matrix3x2F_IsIdentity = (tMtx.m_11 = 1!) And (tMtx.m_12 = 0!) And _
                                    (tMtx.m_21 = 0!) And (tMtx.m_22 = 1!) And _
                                    (tMtx.m_31 = 0!) And (tMtx.m_32 = 0!)
        End Function

        Public Function Matrix3x2F_SetProduct( _
                        ByRef tMtx1 As D2D1_MATRIX_3X2_F, _
                        ByRef tMtx2 As D2D1_MATRIX_3X2_F) As D2D1_MATRIX_3X2_F
                
            With Matrix3x2F_SetProduct
    
            .m_11 = tMtx1.m_11 * tMtx2.m_11 + tMtx1.m_12 * tMtx2.m_21
            .m_12 = tMtx1.m_11 * tMtx2.m_12 + tMtx1.m_12 * tMtx2.m_22
            .m_21 = tMtx1.m_21 * tMtx2.m_11 + tMtx1.m_22 * tMtx2.m_21
            .m_22 = tMtx1.m_21 * tMtx2.m_12 + tMtx1.m_22 * tMtx2.m_22
            .m_31 = tMtx1.m_31 * tMtx2.m_11 + tMtx1.m_32 * tMtx2.m_21 + tMtx2.m_31
            .m_32 = tMtx1.m_31 * tMtx2.m_12 + tMtx1.m_32 * tMtx2.m_22 + tMtx2.m_32
    
            End With
    
        End Function

        Public Function Matrix3x2F_TransformPoint( _
                        ByRef tMtx As D2D1_MATRIX_3X2_F, _
                        ByRef tPoint As D2D1_POINT_2F) As D2D1_POINT_2F
    
            With Matrix3x2F_TransformPoint
    
            .x = tPoint.x * tMtx.m_11 + tPoint.y * tMtx.m_21 + tMtx.m_31
            .y = tPoint.x * tMtx.m_12 + tPoint.y * tMtx.m_22 + tMtx.m_32
    
            End With
    
        End Function

        Public Function Matrix4x3F( _
                        ByVal f_11 As Single, _
                        ByVal f_12 As Single, _
                        ByVal f_13 As Single, _
                        ByVal f_21 As Single, _
                        ByVal f_22 As Single, _
                        ByVal f_23 As Single, _
                        ByVal f_31 As Single, _
                        ByVal f_32 As Single, _
                        ByVal f_33 As Single, _
                        ByVal f_41 As Single, _
                        ByVal f_42 As Single, _
                        ByVal f_43 As Single) As D2D1_MATRIX_4X3_F
    
            With Matrix4x3F
    
            .m_11 = f_11
            .m_12 = f_12
            .m_13 = f_13
            .m_21 = f_21
            .m_22 = f_22
            .m_23 = f_23
            .m_31 = f_31
            .m_32 = f_32
            .m_33 = f_33
            .m_41 = f_41
            .m_42 = f_42
            .m_43 = f_43

            End With
    
        End Function

        Public Function Matrix4x3F_Identity() As D2D1_MATRIX_4X3_F
    
            With Matrix4x3F_Identity
    
            .m_11 = 1!
            .m_22 = 1!
            .m_33 = 1!
    
            End With
    
        End Function

        Public Function Matrix4x4F( _
                        ByVal f_11 As Single, _
                        ByVal f_12 As Single, _
                        ByVal f_13 As Single, _
                        ByVal f_14 As Single, _
                        ByVal f_21 As Single, _
                        ByVal f_22 As Single, _
                        ByVal f_23 As Single, _
                        ByVal f_24 As Single, _
                        ByVal f_31 As Single, _
                        ByVal f_32 As Single, _
                        ByVal f_33 As Single, _
                        ByVal f_34 As Single, _
                        ByVal f_41 As Single, _
                        ByVal f_42 As Single, _
                        ByVal f_43 As Single, _
                        ByVal f_44 As Single) As D2D1_MATRIX_4X4_F
    
            With Matrix4x4F
    
            .m_11 = f_11
            .m_12 = f_12
            .m_13 = f_13
            .m_14 = f_14
            .m_21 = f_21
            .m_22 = f_22
            .m_23 = f_23
            .m_24 = f_24
            .m_31 = f_31
            .m_32 = f_32
            .m_33 = f_33
            .m_34 = f_34
            .m_41 = f_41
            .m_42 = f_42
            .m_43 = f_43
            .m_44 = f_44
    
            End With
    
        End Function

        Public Function Matrix4x4F_Identity() As D2D1_MATRIX_4X4_F
    
            With Matrix4x4F_Identity
    
            .m_11 = 1!
            .m_22 = 1!
            .m_33 = 1!
            .m_44 = 1!
    
            End With
    
        End Function

        Public Function Matrix4x4F_Translation( _
                        ByVal fX As Single, _
                        ByVal fY As Single, _
                        ByVal fZ As Single) As D2D1_MATRIX_4X4_F
    
            With Matrix4x4F_Translation
    
            .m_11 = 1!
            .m_22 = 1!
            .m_33 = 1!
            .m_44 = 1!
            .m_41 = fX
            .m_42 = fY
            .m_43 = fZ
    
            End With
    
        End Function

        Public Function Matrix4x4F_Scale( _
                        ByVal fX As Single, _
                        ByVal fY As Single, _
                        ByVal fZ As Single) As D2D1_MATRIX_4X4_F
    
            With Matrix4x4F_Scale
    
            .m_11 = fX
            .m_22 = fY
            .m_33 = fZ
            .m_44 = 1!

            End With
    
        End Function

        Public Function Matrix4x4F_RotationX( _
                        ByVal fDegreeX As Single) As D2D1_MATRIX_4X4_F
            Dim fAngleInRadian  As Single
            Dim fSin            As Single
            Dim fCos            As Single
    
            fAngleInRadian = fDegreeX * (3.141593! / 180!)
    
            D2D1SinCos fAngleInRadian, fSin, fCos
    
            With Matrix4x4F_RotationX
    
            .m_11 = 1
            .m_22 = fCos
            .m_33 = fCos
            .m_23 = fSin
            .m_32 = -fSin
            .m_44 = 1!

            End With
    
        End Function

        Public Function Matrix4x4F_RotationY( _
                        ByVal fDegreeY As Single) As D2D1_MATRIX_4X4_F
            Dim fAngleInRadian  As Single
            Dim fSin            As Single
            Dim fCos            As Single
    
            fAngleInRadian = fDegreeY * (3.141593! / 180!)
    
            D2D1SinCos fAngleInRadian, fSin, fCos
    
            With Matrix4x4F_RotationY
    
            .m_11 = fCos
            .m_13 = -fSin
            .m_22 = 1!
            .m_31 = fSin
            .m_33 = fCos
            .m_44 = 1!

            End With
    
        End Function

        Public Function Matrix4x4F_RotationZ( _
                        ByVal fDegreeZ As Single) As D2D1_MATRIX_4X4_F
            Dim fAngleInRadian  As Single
            Dim fSin            As Single
            Dim fCos            As Single
    
            fAngleInRadian = fDegreeZ * (3.141593! / 180!)
    
            D2D1SinCos fAngleInRadian, fSin, fCos
    
            With Matrix4x4F_RotationZ
    
            .m_11 = fCos
            .m_12 = fSin
            .m_21 = -fSin
            .m_22 = fCos
            .m_33 = 1!
            .m_44 = 1!

            End With
    
        End Function

        Public Function Matrix4x4F_RotationArbitraryAxis( _
                        ByVal fX As Single, _
                        ByVal fY As Single, _
                        ByVal fZ As Single, _
                        ByVal fDegree As Single) As D2D1_MATRIX_4X4_F
            Dim fAngleInRadian  As Single
            Dim fMagnitude      As Single
            Dim fSin            As Single
            Dim fCos            As Single
            Dim fInvCos         As Single
    
            fMagnitude = D2D1Vec3Length(fX, fY, fZ)
    
            fX = fX / fMagnitude
            fY = fY / fMagnitude
            fZ = fZ / fMagnitude
    
            fAngleInRadian = fDegree * (3.141593! / 180!)
    
            D2D1SinCos fAngleInRadian, fSin, fCos
    
            fInvCos = 1 - fCos
    
            With Matrix4x4F_RotationArbitraryAxis
    
            .m_11 = 1 + fInvCos * (fX * fX - 1)
            .m_12 = fZ * fSin + fInvCos * fX * fY
            .m_13 = -fY * fSin + fInvCos * fX * fZ
            .m_21 = -fZ * fSin + fInvCos * fY * fX
            .m_22 = 1 + fInvCos * (fY * fY - 1)
            .m_23 = fX * fSin + fInvCos * fY * fZ
            .m_31 = fY * fSin + fInvCos * fZ * fX
            .m_32 = -fX * fSin + fInvCos * fZ * fY
            .m_33 = 1 + fInvCos * (fZ * fZ - 1)
            .m_44 = 1
    
            End With
    
        End Function

        Public Function Matrix4x4F_SkewX( _
                        ByVal fDegreeX As Single) As D2D1_MATRIX_4X4_F
            Dim fAngleInRadian  As Single
            Dim fTan            As Single
    
            fAngleInRadian = fDegreeX * (3.141593! / 180!)
            fTan = D2D1Tan(fAngleInRadian)

            With Matrix4x4F_SkewX
    
            .m_11 = 1!
            .m_21 = fTan
            .m_22 = 1!
            .m_33 = 1!
            .m_44 = 1!

            End With
    
        End Function

        Public Function Matrix4x4F_SkewY( _
                        ByVal fDegreeY As Single) As D2D1_MATRIX_4X4_F
            Dim fAngleInRadian  As Single
            Dim fTan            As Single
    
            fAngleInRadian = fDegreeY * (3.141593! / 180!)
            fTan = D2D1Tan(fAngleInRadian)

            With Matrix4x4F_SkewY
    
            .m_11 = 1!
            .m_12 = fTan
            .m_22 = 1!
            .m_33 = 1!
            .m_44 = 1!

            End With
    
        End Function

        Public Function Matrix4x4F_PerspectiveProjection( _
                        ByVal fDepth As Single) As D2D1_MATRIX_4X4_F
            Dim fProj   As Single
    
            If fDepth > 0 Then
                fProj = -1 / fDepth
            End If
    
            With Matrix4x4F_PerspectiveProjection
    
            .m_11 = 1!
            .m_12 = 1!
            .m_22 = 1!
            .m_33 = 1!
            .m_34 = fProj
            .m_44 = 1!

            End With
    
        End Function

        Public Function Matrix4x4F_Determinant( _
                        ByRef tMtx As D2D1_MATRIX_4X4_F) As Single
            Dim fMinor1 As Single
            Dim fMinor2 As Single
            Dim fMinor3 As Single
            Dim fMinor4 As Single
    
            With tMtx
    
            fMinor1 = .m_41 * (.m_12 * (.m_23 * .m_34 - .m_33 * .m_24) - _
                      .m_13 * (.m_22 * .m_34 - .m_24 * .m_32) + _
                      .m_14 * (.m_22 * .m_33 - .m_23 * .m_32))
            fMinor2 = .m_42 * (.m_11 * (.m_21 * .m_34 - .m_31 * .m_24) - _
                      .m_13 * (.m_21 * .m_34 - .m_24 * .m_31) + _
                      .m_14 * (.m_21 * .m_33 - .m_23 * .m_31))
            fMinor3 = .m_43 * (.m_11 * (.m_22 * .m_34 - .m_32 * .m_24) - _
                      .m_12 * (.m_21 * .m_34 - .m_24 * .m_31) + _
                      .m_14 * (.m_21 * .m_32 - .m_22 * .m_31))
            fMinor4 = .m_44 * (.m_11 * (.m_22 * .m_33 - .m_32 * .m_23) - _
                      .m_12 * (.m_21 * .m_33 - .m_23 * .m_31) + _
                      .m_13 * (.m_21 * .m_32 - .m_22 * .m_31))

            Matrix4x4F_Determinant = fMinor1 - fMinor2 + fMinor3 - fMinor4
            
            End With
    
        End Function

        Public Function Matrix4x4F_IsIdentity( _
                        ByRef tMtx As D2D1_MATRIX_4X4_F) As Boolean
            Matrix4x4F_IsIdentity = (tMtx.m_11 = 1!) And (tMtx.m_12 = 0!) And (tMtx.m_13 = 0!) And (tMtx.m_14 = 0!) And _
                                    (tMtx.m_21 = 0!) And (tMtx.m_22 = 1!) And (tMtx.m_23 = 0!) And (tMtx.m_24 = 0!) And _
                                    (tMtx.m_31 = 0!) And (tMtx.m_32 = 0!) And (tMtx.m_33 = 1!) And (tMtx.m_34 = 0!) And _
                                    (tMtx.m_41 = 0!) And (tMtx.m_42 = 0!) And (tMtx.m_43 = 1!) And (tMtx.m_44 = 1!)
        End Function

        Public Function Matrix4x4F_SetProduct( _
                        ByRef tMtx1 As D2D1_MATRIX_4X4_F, _
                        ByRef tMtx2 As D2D1_MATRIX_4X4_F) As D2D1_MATRIX_4X4_F
                
            With Matrix4x4F_SetProduct
    
            .m_11 = tMtx1.m_11 * tMtx2.m_11 + tMtx1.m_12 * tMtx2.m_21 + tMtx1.m_13 * tMtx2.m_31 + tMtx1.m_14 * tMtx2.m_41
            .m_12 = tMtx1.m_11 * tMtx2.m_12 + tMtx1.m_12 * tMtx2.m_22 + tMtx1.m_13 * tMtx2.m_32 + tMtx1.m_14 * tMtx2.m_42
            .m_13 = tMtx1.m_11 * tMtx2.m_13 + tMtx1.m_12 * tMtx2.m_23 + tMtx1.m_13 * tMtx2.m_33 + tMtx1.m_14 * tMtx2.m_43
            .m_14 = tMtx1.m_11 * tMtx2.m_14 + tMtx1.m_12 * tMtx2.m_24 + tMtx1.m_13 * tMtx2.m_34 + tMtx1.m_14 * tMtx2.m_44

            .m_21 = tMtx1.m_21 * tMtx2.m_11 + tMtx1.m_22 * tMtx2.m_21 + tMtx1.m_23 * tMtx2.m_31 + tMtx1.m_24 * tMtx2.m_41
            .m_22 = tMtx1.m_21 * tMtx2.m_12 + tMtx1.m_22 * tMtx2.m_22 + tMtx1.m_23 * tMtx2.m_32 + tMtx1.m_24 * tMtx2.m_42
            .m_23 = tMtx1.m_21 * tMtx2.m_13 + tMtx1.m_22 * tMtx2.m_23 + tMtx1.m_23 * tMtx2.m_33 + tMtx1.m_24 * tMtx2.m_43
            .m_24 = tMtx1.m_21 * tMtx2.m_14 + tMtx1.m_22 * tMtx2.m_24 + tMtx1.m_23 * tMtx2.m_34 + tMtx1.m_24 * tMtx2.m_44

            .m_31 = tMtx1.m_31 * tMtx2.m_11 + tMtx1.m_32 * tMtx2.m_21 + tMtx1.m_33 * tMtx2.m_31 + tMtx1.m_34 * tMtx2.m_41
            .m_32 = tMtx1.m_31 * tMtx2.m_12 + tMtx1.m_32 * tMtx2.m_22 + tMtx1.m_33 * tMtx2.m_32 + tMtx1.m_34 * tMtx2.m_42
            .m_33 = tMtx1.m_31 * tMtx2.m_13 + tMtx1.m_32 * tMtx2.m_23 + tMtx1.m_33 * tMtx2.m_33 + tMtx1.m_34 * tMtx2.m_43
            .m_34 = tMtx1.m_31 * tMtx2.m_14 + tMtx1.m_32 * tMtx2.m_24 + tMtx1.m_33 * tMtx2.m_34 + tMtx1.m_34 * tMtx2.m_44

            .m_41 = tMtx1.m_41 * tMtx2.m_11 + tMtx1.m_42 * tMtx2.m_21 + tMtx1.m_43 * tMtx2.m_31 + tMtx1.m_44 * tMtx2.m_41
            .m_42 = tMtx1.m_41 * tMtx2.m_12 + tMtx1.m_42 * tMtx2.m_22 + tMtx1.m_43 * tMtx2.m_32 + tMtx1.m_44 * tMtx2.m_42
            .m_43 = tMtx1.m_41 * tMtx2.m_13 + tMtx1.m_42 * tMtx2.m_23 + tMtx1.m_43 * tMtx2.m_33 + tMtx1.m_44 * tMtx2.m_43
            .m_44 = tMtx1.m_41 * tMtx2.m_14 + tMtx1.m_42 * tMtx2.m_24 + tMtx1.m_43 * tMtx2.m_34 + tMtx1.m_44 * tMtx2.m_44
        
            End With
    
        End Function

        Public Function Matrix5x4F( _
                        ByVal f_11 As Single, _
                        ByVal f_12 As Single, _
                        ByVal f_13 As Single, _
                        ByVal f_14 As Single, _
                        ByVal f_21 As Single, _
                        ByVal f_22 As Single, _
                        ByVal f_23 As Single, _
                        ByVal f_24 As Single, _
                        ByVal f_31 As Single, _
                        ByVal f_32 As Single, _
                        ByVal f_33 As Single, _
                        ByVal f_34 As Single, _
                        ByVal f_41 As Single, _
                        ByVal f_42 As Single, _
                        ByVal f_43 As Single, _
                        ByVal f_44 As Single, _
                        ByVal f_51 As Single, _
                        ByVal f_52 As Single, _
                        ByVal f_53 As Single, _
                        ByVal f_54 As Single) As D2D1_MATRIX_5X4_F
    
            With Matrix5x4F
    
            .m_11 = f_11
            .m_12 = f_12
            .m_13 = f_13
            .m_14 = f_14
            .m_21 = f_21
            .m_22 = f_22
            .m_23 = f_23
            .m_24 = f_24
            .m_31 = f_31
            .m_32 = f_32
            .m_33 = f_33
            .m_34 = f_34
            .m_41 = f_41
            .m_42 = f_42
            .m_43 = f_43
            .m_44 = f_44
            .m_51 = f_51
            .m_52 = f_52
            .m_53 = f_53
            .m_54 = f_54
    
            End With
    
        End Function

        Public Function Matrix5x4F_Identity() As D2D1_MATRIX_5X4_F
    
            With Matrix5x4F_Identity
    
            .m_11 = 1!
            .m_22 = 1!
            .m_33 = 1!
            .m_44 = 1!
    
            End With
    
        End Function

        Public Function ConvertColorSpace( _
                        ByVal eSourceColorSpace As D2D1_COLOR_SPACE, _
                        ByVal eDestinationColorSpace As D2D1_COLOR_SPACE, _
                        ByRef tColor As D2D1_COLOR_F) As D2D1_COLOR_F
            ConvertColorSpace = D2D1ConvertColorSpace(eSourceColorSpace, eDestinationColorSpace, tColor)
        End Function

        ' // TODO
        ' // DrawingStateDescription1
        ' // BitmapProperties1
        ' // LayerParameters1
        ' // StrokeStyleProperties1
        ' // ImageBrushProperties
        ' // BitmapBrushProperties1
        ' // PrintControlProperties
        ' // RenderingControls
        ' // EffectInputDescription
        ' // CreationProperties
        ' // Point2L
        ' // RectL

        Public Sub SetDpiCompensatedEffectInput( _
                   ByVal cContext As ID2D1DeviceContext, _
                   ByVal cEffect As ID2D1Effect, _
                   ByVal lInputIndex As Long, _
                   ByVal cBitmap As ID2D1Bitmap, _
                   Optional ByVal eInterpolationMode As D2D1_INTERPOLATION_MODE = D2D1_INTERPOLATION_MODE_LINEAR, _
                   Optional ByVal eBorderMode As D2D1_BORDER_MODE = D2D1_BORDER_MODE_HARD)
            Dim cDpiEffect  As ID2D1Effect
            Dim tCLSID      As UUID
            Dim tDPI        As D2D1_POINT_2F
    
            If cBitmap Is Nothing Then
                cEffect.SetInput lInputIndex, Nothing
                Exit Sub
            End If
    
            ' // CLSID_D2D1DpiCompensation
            ' GetMem8 511502141527783.9815@, tCLSID
            ' GetMem8 294592394174280.438@, ByVal VarPtr(tCLSID) + 8
    
            Set cDpiEffect = cContext.CreateEffect(CLSID_D2D1DpiCompensation)
    
            cDpiEffect.SetInput 0, cBitmap
            cBitmap.GetDpi tDPI.x, tDPI.y
            cDpiEffect.SetValue D2D1_DPICOMPENSATION_PROP_INPUT_DPI, D2D1_PROPERTY_TYPE_UNKNOWN, tDPI, LenB(tDPI)
            cDpiEffect.SetValue D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE, D2D1_PROPERTY_TYPE_UNKNOWN, eInterpolationMode, LenB(eInterpolationMode)
            cDpiEffect.SetValue D2D1_DPICOMPENSATION_PROP_BORDER_MODE, D2D1_PROPERTY_TYPE_UNKNOWN, eBorderMode, LenB(eBorderMode)
            Dim di As ID2D1Image
            cDpiEffect.GetOutput di
            cEffect.SetInput lInputIndex, di
    
        End Sub
    
        Public Function SizeU(Optional ByVal cx As Long = 0, Optional ByVal cy As Long = 0) As D2D1_SIZE_U
            SizeU.width = cx
            SizeU.Height = cy
        End Function
        Public Function SizeF(Optional ByVal cx As Single = 0, Optional ByVal cy As Single = 0) As D2D1_SIZE_F
            SizeU.width = cx
            SizeU.Height = cy
        End Function
    
        Public Function Vector2F( _
                        Optional ByVal fX As Single, _
                        Optional ByVal fY As Single) As D2D1_VECTOR_2F

            Vector2F.x = fX
            Vector2F.y = fY
    
        End Function

        Public Function Vector3F( _
                        Optional ByVal fX As Single, _
                        Optional ByVal fY As Single, _
                        Optional ByVal fZ As Single) As D2D1_VECTOR_3F

            Vector3F.x = fX
            Vector3F.y = fY
            Vector3F.z = fZ
    
        End Function

        Public Function Vector4F( _
                        Optional ByVal fX As Single, _
                        Optional ByVal fY As Single, _
                        Optional ByVal fZ As Single, _
                        Optional ByVal fW As Single) As D2D1_VECTOR_4F

            Vector4F.x = fX
            Vector4F.y = fY
            Vector4F.z = fZ
            Vector4F.w = fW
    
        End Function
    
        Public Function RenderTargetProperties(Optional ByVal nType As D2D1_RENDER_TARGET_TYPE = D2D1_RENDER_TARGET_TYPE_DEFAULT, _
                                    Optional ByVal dxgiformat As DXGI_FORMAT = DXGI_FORMAT_UNKNOWN, _
                                    Optional ByVal AlphaMode As D2D1_ALPHA_MODE = D2D1_ALPHA_MODE_UNKNOWN, _
                                    Optional ByVal dpiX As Single = 0.0!, _
                                    Optional ByVal dpiY As Single = 0.0!, _
                                    Optional ByVal usage As D2D1_RENDER_TARGET_USAGE = D2D1_RENDER_TARGET_USAGE_NONE, _
                                    Optional ByVal minLevel As D2D1_FEATURE_LEVEL = D2D1_FEATURE_LEVEL_DEFAULT) As D2D1_RENDER_TARGET_PROPERTIES
            With RenderTargetProperties
                .type = nType
                .PixelFormat = D2D1.PixelFormat(dxgiformat, AlphaMode)
                .DpiX = dpiX
                .DpiY = dpiY
                .Usage = usage
                .minLevel = minLevel
            End With
        End Function
        Public Function PixelFormat(Optional ByVal dxgiformat As DXGI_FORMAT = DXGI_FORMAT_UNKNOWN, _
                                    Optional ByVal AlphaMode As D2D1_ALPHA_MODE = D2D1_ALPHA_MODE_UNKNOWN) As D2D1_PIXEL_FORMAT
            PixelFormat.Format = dxgiformat
            PixelFormat.AlphaMode = AlphaMode
        End Function
    End Class